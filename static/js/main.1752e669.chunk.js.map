{"version":3,"sources":["component/dashboard.tsx","component/Scabble.tsx","component/data.ts","component/WordSearch.tsx","component/WF.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columns","dataField","text","DashboardComponent","props","state","leaderBoardData","rank","name","score","data","this","shuffleArray","setState","array","i","length","j","Math","floor","random","temp","Container","Row","className","Col","style","marginBottom","ButtonGroup","aria-label","Button","variant","onClick","shuffle","bind","keyField","striped","hover","condensed","pagination","paginationFactory","paginationSize","pageStartIndex","sizePerPageList","value","Component","ScrabbleComponent","word","hint","display","selection","disabled","successJumbotron","failureJumbotron","hintJumbotron","failed","success","hintFlag","selectionIndex","level","newGame","sort","wordClick","charAt","findIndex","e","index","console","log","pop","join","Jumbotron","aria-hidden","letter","clickIndex","event","push","flat","ButtonToolbar","Dropdown","Toggle","id","Menu","Item","onSelect","changeLevel","undo","showHint","split","map","leter","hidden","check","orientations","horizontal","x","y","horizontalBack","vertical","verticalUp","diagonal","diagonalBack","diagonalUp","diagonalUpBack","allOrientations","WordSearchComponent","width","height","wordList","wordListHindi","wordList1","wordList2","wordList3","wordListHindi1","wordListHindi2","wordListHindi3","startSquare","selectedSquares","curWord","curOrientation","matrix","createMatrix","combine","forEach","wordHindi","selected","createBindings","window","navigator","msPointerEnabled","$","on","startTurn","select","endTurn","mousedown","mouseenter","mouseMove","mouseup","touchMove","target","lastSquare","backTo","len","removeClass","splice","substr","x1","attributes","x2","x3","currentTarget","x4","newOrientation","calcOrientation","x11","x21","x31","x41","orientation","playTurn","addClass","textContent","y1","y2","nextPos","nextFn","square","indexOf","classList","add","xPos","originalEvent","touches","pageX","yPos","pageY","targetElement","document","elementFromPoint","contains","filter","w","includes","classToApply","reveal","gameComplete","options","preferOverlap","fill","LETTERS","checkOrientations","h","l","skipOrientations","fillPuzzle","words","puzzle","placeWordInPuzzle","locations","findBestLocations","sel","placeWord","wordLength","maxOverlap","k","next","skipTo","overlap","calcOverlap","nextPossible","pruneLocations","fnGetSquare","pruned","validOrientations","newPuzzle","settings","Error","attempts","gridGrowths","opts","maxWordLength","slice","fillBlanks","undefined","allowExtraBlanks","maxAttempts","maxGridGrowth","lettersToAdd","extraLetterGenerator","fillingBlanksCount","toLowerCase","extraLettersCount","gridFillPercent","toFixed","solve","found","notFound","print","puzzleString","row","WordFind","elements","getElementsByClassName","el","remove","alert","reCreate","index2","lineHeight","marginTop","App","Navbar","bg","Nav","NavItem","Link","as","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1752e669.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, ButtonGroup, Col, Container, Row } from \"react-bootstrap\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nconst columns = [\r\n  {\r\n    dataField: \"rank\",\r\n    text: \"Rank\",\r\n  },\r\n  {\r\n    dataField: \"name\",\r\n    text: \"User Name\",\r\n  },\r\n  {\r\n    dataField: \"score\",\r\n    text: \"Score\",\r\n  },\r\n];\r\nexport class DashboardComponent extends Component<\r\n  {},\r\n  { leaderBoardData: any }\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      leaderBoardData: [\r\n        { rank: \"1\", name: \"Anuj\", score: \"3333333\" },\r\n        { rank: \"2\", name: \"Ram\", score: \"555555\" },\r\n        { rank: \"3\", name: \"Anand\", score: \"222222\" },\r\n        { rank: \"4\", name: \"Nishant\", score: \"1111111\" },\r\n        { rank: \"5\", name: \"Rahul\", score: \"123\" },\r\n        { rank: \"6\", name: \"Ram1\", score: \"555555\" },\r\n        { rank: \"7\", name: \"Anand1\", score: \"222222\" },\r\n        { rank: \"8\", name: \"Nishant1\", score: \"1111111\" },\r\n        { rank: \"9\", name: \"Rahul1\", score: \"123\" },\r\n        { rank: \"10\", name: \"Ram2\", score: \"555555\" },\r\n        { rank: \"11\", name: \"Anand2\", score: \"222222\" },\r\n        { rank: \"12\", name: \"Nishant2\", score: \"1111111\" },\r\n        { rank: \"13\", name: \"Rahul2\", score: \"123\" },\r\n      ],\r\n    };\r\n  }\r\n  shuffle() {\r\n    const data = this.shuffleArray(this.state.leaderBoardData);\r\n    this.setState({ leaderBoardData: data });\r\n  }\r\n  shuffleArray(array: any) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br></br>\r\n        <Row className=\"text-center\">\r\n          <Col>\r\n            <h4>LeaderBoard</h4>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"text-center\" style={{ marginBottom: \"8px\" }}>\r\n            <ButtonGroup aria-label=\"Basic example\">\r\n              <Button variant=\"secondary\" onClick={this.shuffle.bind(this)}>\r\n                Daily\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={this.shuffle.bind(this)}>\r\n                Monthly\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={this.shuffle.bind(this)}>\r\n                Yearly\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <BootstrapTable\r\n              keyField=\"rank\"\r\n              data={this.state.leaderBoardData}\r\n              columns={columns}\r\n              striped\r\n              hover\r\n              condensed\r\n              pagination={paginationFactory({\r\n                paginationSize: 4,\r\n                pageStartIndex: 0,\r\n                sizePerPageList: [\r\n                  {\r\n                    text: \"5\",\r\n                    value: 5,\r\n                  },\r\n                ],\r\n              })}\r\n            />{\" \"}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Container,\r\n  Dropdown,\r\n  Jumbotron,\r\n  Row,\r\n} from \"react-bootstrap\";\r\n\r\nexport class ScrabbleComponent extends Component<{}, {}> {\r\n  word: any;\r\n  hint = \"\";\r\n  display: any;\r\n  selection: any;\r\n  disabled: any;\r\n  successJumbotron: any;\r\n  failureJumbotron: any;\r\n  hintJumbotron: any = \"\";\r\n  failed = false;\r\n  success = false;\r\n  hintFlag = false;\r\n  selectionIndex: any;\r\n  level = \"Level 1\";\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.newGame();\r\n  }\r\n  shuffleArray(array: any) {\r\n    array.sort(() => Math.random() - 0.5);\r\n    return array;\r\n  }\r\n  showHint() {\r\n    // this.hintFlag = true;\r\n    // this.selection.push(this.word.charAt(this.selection.length));\r\n    this.wordClick(\r\n      this.word.charAt(this.selection.length),\r\n      this.display.findIndex((e: any, index: any) => {\r\n        if (this.disabled[index]) {\r\n          return false;\r\n        } else {\r\n          return e === this.word.charAt(this.selection.length);\r\n        }\r\n      }),\r\n      {}\r\n    );\r\n  }\r\n  undo() {\r\n    console.log(this);\r\n    this.selection.pop();\r\n    this.hintFlag = false;\r\n    this.disabled[this.selectionIndex.pop()] = false;\r\n    this.setState({});\r\n  }\r\n  check() {\r\n    if (this.selection.join(\"\") === this.word) {\r\n      this.failed = false;\r\n      this.success = true;\r\n      this.successJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>You Win</h1>\r\n          <p>\r\n            <i className=\"fa fa-smile-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    } else {\r\n      this.failed = true;\r\n      this.success = false;\r\n      this.failureJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>Try again!</h1>\r\n          <p>\r\n            <i className=\"fa fa-frown-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    }\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n\r\n  wordClick(letter: any, clickIndex: any, event: any) {\r\n    console.log(event);\r\n    console.log(letter);\r\n    this.selection.push(letter);\r\n    this.selectionIndex.push(clickIndex);\r\n    this.disabled[clickIndex] = true;\r\n    if (this.disabled.flat().length === this.display.length) {\r\n      this.hintFlag = true;\r\n    }\r\n    this.setState({});\r\n  }\r\n  newGame() {\r\n    if (this.level === \"Level 1\") {\r\n      this.word = \"early\";\r\n      this.hint = \"जल्दी\";\r\n    } else if (this.level === \"Level 2\") {\r\n      this.word = \"Squeeze\";\r\n      this.hint = \"निचोड़ना\";\r\n    } else {\r\n      this.word = \"abnormal\";\r\n      this.hint = \"असामान्य\";\r\n    }\r\n    this.display = [...this.word];\r\n    this.display = this.shuffleArray(this.display);\r\n    this.selection = [];\r\n    this.selectionIndex = [];\r\n    this.disabled = [];\r\n    this.failed = false;\r\n    this.success = false;\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n  changeLevel(level: any) {\r\n    this.level = \"Level \" + level;\r\n    this.newGame();\r\n    this.setState({});\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n        <Container className=\"justify-content-center\">\r\n          <Row className=\"justify-content-center\"></Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group1\">\r\n                <Dropdown>\r\n                  <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                    {this.level}\r\n                  </Dropdown.Toggle>\r\n\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 1)}>\r\n                      {\" \"}\r\n                      Level 1\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 2)}>\r\n                      {\" \"}\r\n                      Level 2\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 3)}>\r\n                      {\" \"}\r\n                      Level 3\r\n                    </Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.newGame.bind(this)}\r\n                >\r\n                  New Game\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  disabled={\r\n                    this.selectionIndex.length === 0 ||\r\n                    this.failed ||\r\n                    this.success\r\n                  }\r\n                  onClick={this.undo.bind(this)}\r\n                >\r\n                  Undo\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  disabled={this.hintFlag || this.failed || this.success}\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.showHint.bind(this)}\r\n                >\r\n                  Hint\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <Jumbotron className=\"text-center\">\r\n              <h1>Meaning</h1>\r\n              <p>{this.hint}</p>\r\n            </Jumbotron>\r\n          </Row>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.word.split(\"\").map((leter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"fill\" + index}\r\n                  >\r\n                    <Button variant=\"outline-primary\">\r\n                      {this.selection[index]}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.display.map((letter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"word\" + index}\r\n                  >\r\n                    <Button\r\n                      // hidden={this.disabled[index] === true}\r\n                      onClick={this.wordClick.bind(this, letter, index)}\r\n                      disabled={this.disabled[index] === true}\r\n                    >\r\n                      {letter}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>{\" \"}\r\n          <div style={{ marginBottom: \"8px\" }}></div>\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={this.selection.flat().length !== this.word.length}\r\n          >\r\n            <Button\r\n              disabled={this.success || this.failed}\r\n              onClick={this.check.bind(this)}\r\n            >\r\n              Check\r\n            </Button>\r\n          </Row>{\" \"}\r\n          <div style={{ marginBottom: \"8px\" }}></div>\r\n          <Row className=\"justify-content-center\" hidden={!this.hintFlag}>\r\n            {this.hintJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(this.success && !this.failed)}\r\n          >\r\n            {this.successJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(!this.success && this.failed)}\r\n          >\r\n            {this.failureJumbotron}\r\n          </Row>{\" \"}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export const orientations: any = {\r\n  horizontal: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y };\r\n  },\r\n  horizontalBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y };\r\n  },\r\n  vertical: function (x: any, y: any, i: any) {\r\n    return { x: x, y: y + i };\r\n  },\r\n  verticalUp: function (x: any, y: any, i: any) {\r\n    return { x: x, y: y - i };\r\n  },\r\n  diagonal: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y + i };\r\n  },\r\n  diagonalBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y + i };\r\n  },\r\n  diagonalUp: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y - i };\r\n  },\r\n  diagonalUpBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y - i };\r\n  },\r\n};\r\nexport const allOrientations = [\r\n  \"horizontal\",\r\n  \"horizontalBack\",\r\n  \"vertical\",\r\n  \"verticalUp\",\r\n  \"diagonal\",\r\n  \"diagonalUp\",\r\n  \"diagonalBack\",\r\n  \"diagonalUpBack\",\r\n];\r\n","import $ from \"jquery\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Col,\r\n  Container,\r\n  Dropdown,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport { allOrientations, orientations } from \"./data\";\r\nimport { WordFind } from \"./WF\";\r\nexport class WordSearchComponent extends Component<\r\n  {},\r\n  {\r\n    matrix: any;\r\n    combine: any;\r\n  }\r\n> {\r\n  level = \"Level 1\";\r\n  width = 6;\r\n  height = 6;\r\n  wordList: any = [\"COME\", \"BEST\", \"JERK\", \"ERASE\", \"JAW\", \"ALLOW\"];\r\n  wordListHindi: any = [\r\n    \"आइए\",\r\n    \"श्रेष्ठ\",\r\n    \"मंदबुद्धि\",\r\n    \"मिटाना\",\r\n    \"जबड़ा\",\r\n    \"अनुमति\",\r\n  ];\r\n  wordList1: any = [\"COME\", \"BEST\", \"JERK\", \"ERASE\", \"JAW\", \"ALLOW\"];\r\n  wordList2: any = [\"ATTACK\", \"EAGER\", \"ERRATIC\", \"COLOUR\", \"SMALL\", \"SWALLOW\"];\r\n  wordList3: any = [\r\n    \"VIOLENT\",\r\n    \"WALKING\",\r\n    \"CAPTION\",\r\n    \"DECLINE\",\r\n    \"FASHION\",\r\n    \"SESSION\",\r\n  ];\r\n  wordListHindi1: any = [\r\n    \"आइए\",\r\n    \"श्रेष्ठ\",\r\n    \"मंदबुद्धि\",\r\n    \"मिटाना\",\r\n    \"जबड़ा\",\r\n    \"अनुमति\",\r\n  ];\r\n  wordListHindi2: any = [\"हमला\", \"उत्सुक\", \"त्रुटि\", \"रंग\", \"छोटा\", \"गटकना\"];\r\n  wordListHindi3: any = [\"हिंसक\", \"घूमना\", \"संबंध\", \"पतन\", \"विधान\", \"सत्र\"];\r\n  startSquare: any;\r\n  selectedSquares: any = [];\r\n  curWord: any;\r\n  curOrientation: any;\r\n  constructor(props: any) {\r\n    super(props);\r\n    const matrix = this.createMatrix();\r\n    const combine: any = [];\r\n    this.wordList.forEach((word: string, index: number) => {\r\n      combine.push({\r\n        word: word,\r\n        wordHindi: this.wordListHindi1[index],\r\n        selected: false,\r\n      });\r\n    });\r\n    this.state = { matrix, combine };\r\n  }\r\n  componentDidMount() {\r\n    this.createBindings();\r\n  }\r\n  componentDidUpdate() {\r\n    this.createBindings();\r\n  }\r\n  createBindings() {\r\n    if (window.navigator.msPointerEnabled) {\r\n      $(\".puzzleSquare\").on(\"MSPointerDown\", this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"MSPointerOver\", this.select.bind(this));\r\n      $(\".puzzleSquare\").on(\"MSPointerUp\", this.endTurn.bind(this));\r\n    } else {\r\n      $(\".puzzleSquare\").mousedown(this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").mouseenter(this.mouseMove.bind(this));\r\n      $(\".puzzleSquare\").mouseup(this.endTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchstart\", this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchmove\", this.touchMove.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchend\", this.endTurn.bind(this));\r\n    }\r\n  }\r\n  select(target: any) {\r\n    // if the user hasn't started a word yet, just return\r\n    if (!this.startSquare) {\r\n      return;\r\n    }\r\n    // if the new square is actually the previous square, just return\r\n    var lastSquare = this.selectedSquares[this.selectedSquares.length - 1];\r\n    if (lastSquare === target) {\r\n      return;\r\n    }\r\n\r\n    // see if the user backed up and correct the selectedSquares state if\r\n    // they did\r\n    let backTo;\r\n    for (var i = 0, len = this.selectedSquares.length; i < len; i++) {\r\n      if (this.selectedSquares[i] === target) {\r\n        backTo = i + 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    while (backTo && backTo < this.selectedSquares.length) {\r\n      $(this.selectedSquares[this.selectedSquares.length - 1]).removeClass(\r\n        \"selected\"\r\n      );\r\n      this.selectedSquares.splice(backTo, 1);\r\n      this.curWord = this.curWord.substr(0, this.curWord.length - 1);\r\n    }\r\n    const x1: any = this.startSquare.attributes[\"x\"].value - 0;\r\n    const x2: any = this.startSquare.attributes[\"y\"].value - 0;\r\n    const x3: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"x\"].value - 0\r\n      : target.attributes[\"x\"].value - 0;\r\n    const x4: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"y\"].value - 0\r\n      : target.attributes[\"y\"].value - 0;\r\n    const newOrientation = this.calcOrientation(x1, x2, x3, x4);\r\n\r\n    if (newOrientation) {\r\n      this.selectedSquares = [this.startSquare];\r\n      this.curWord = $(this.startSquare).text();\r\n      if (lastSquare !== this.startSquare) {\r\n        $(lastSquare).removeClass(\"selected\");\r\n        lastSquare = this.startSquare;\r\n      }\r\n      this.curOrientation = newOrientation;\r\n    }\r\n\r\n    const x11: any = lastSquare.attributes[\"x\"].value - 0;\r\n    const x21: any = lastSquare.attributes[\"y\"].value - 0;\r\n    const x31: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"x\"].value - 0\r\n      : target.attributes[\"x\"].value - 0;\r\n    const x41: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"y\"].value - 0\r\n      : target.attributes[\"y\"].value - 0;\r\n    // see if the move is along the same orientation as the last move\r\n    var orientation = this.calcOrientation(x11, x21, x31, x41);\r\n\r\n    // if the new square isn't along a valid orientation, just ignore it.\r\n    // this makes selecting diagonal words less frustrating\r\n    if (!orientation) {\r\n      return;\r\n    }\r\n\r\n    // finally, if there was no previous orientation or this move is along\r\n    // the same orientation as the last move then play the move\r\n    if (!this.curOrientation || this.curOrientation === orientation) {\r\n      this.curOrientation = orientation;\r\n      this.playTurn(target.currentTarget ? target.currentTarget : target);\r\n    }\r\n  }\r\n  mouseMove(event: any) {\r\n    this.select(event);\r\n  }\r\n  startTurn(event: any) {\r\n    $(event.target).addClass(\"selected\");\r\n    this.startSquare = event.target;\r\n    this.selectedSquares.push(event.target);\r\n    this.curWord = event.target.textContent;\r\n  }\r\n  calcOrientation(x1: any, y1: any, x2: any, y2: any) {\r\n    for (var orientation in orientations) {\r\n      var nextFn = orientations[orientation];\r\n      var nextPos = nextFn(x1, y1, 1);\r\n\r\n      if (nextPos.x === x2 && nextPos.y === y2) {\r\n        return orientation;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  playTurn(square: any) {\r\n    // make sure we are still forming a valid word\r\n    for (var i = 0, len = this.wordList.length; i < len; i++) {\r\n      if (this.wordList[i].indexOf(this.curWord + square.textContent) === 0) {\r\n        square.classList.add(\"selected\");\r\n        this.selectedSquares.push(square);\r\n        this.curWord += square.textContent;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  touchMove(e: any) {\r\n    var xPos = e.originalEvent.touches[0].pageX;\r\n    var yPos = e.originalEvent.touches[0].pageY;\r\n    var targetElement: any = document.elementFromPoint(xPos, yPos);\r\n    if (targetElement.classList.contains(\"puzzleSquare\"))\r\n      this.select(targetElement);\r\n  }\r\n  endTurn() {\r\n    // see if we formed a valid word\r\n    for (var i = 0, len = this.wordList.length; i < len; i++) {\r\n      if (\r\n        this.wordList[i] === this.curWord &&\r\n        !this.state.combine\r\n          .filter((w: any) => {\r\n            return w.selected === true;\r\n          })\r\n          .map((e: any) => e.word)\r\n          .includes(this.curWord)\r\n      ) {\r\n        $(\".selected\").addClass(\"found\");\r\n        const classToApply =\r\n          \"found\" +\r\n          this.state.combine.filter((w: any) => {\r\n            return w.selected === false;\r\n          }).length;\r\n        $(\".selected\").addClass(classToApply);\r\n\r\n        this.reveal(this.wordList.indexOf(this.curWord), classToApply);\r\n        $('input.word[value=\"' + this.curWord + '\"]').addClass(\"wordFound\");\r\n        if (\r\n          this.state.combine.filter((w: any) => {\r\n            return w.selected === false;\r\n          }).length === 0\r\n        ) {\r\n          this.gameComplete();\r\n        }\r\n      }\r\n    }\r\n    // reset the turn\r\n    $(\".selected\").removeClass(\"selected\");\r\n    this.startSquare = null;\r\n    this.selectedSquares = [];\r\n    this.curWord = \"\";\r\n    this.curOrientation = null;\r\n  }\r\n  createMatrix() {\r\n    var options = {\r\n      height: this.height,\r\n      width: this.width,\r\n      orientations: allOrientations,\r\n      preferOverlap: false,\r\n    };\r\n    const WF: any = WordFind();\r\n    const fill = WF.newPuzzle(this.wordList, options);\r\n    let matrix: any = [];\r\n    for (let i = 0; i < this.width; i++) {\r\n      matrix[i] = [];\r\n      for (let j = 0; j < this.height; j++) {\r\n        matrix[i][j] = { x: i, y: j, selected: false, letter: fill[i][j] };\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n  reCreate() {\r\n    const matrix = this.createMatrix();\r\n    const combine: any = [];\r\n    this.wordList1.forEach((word: string, index: number) => {\r\n      combine.push({\r\n        word: word,\r\n        wordHindi: this.wordListHindi1[index],\r\n        selected: false,\r\n      });\r\n    });\r\n    let elements: any = document.getElementsByClassName(\"found\");\r\n    if (elements.length > -1)\r\n      [...elements].map((el: any) => {\r\n        return el.classList.remove(\"found\");\r\n      });\r\n    elements = document.getElementsByClassName(\"selected\");\r\n    if (elements.length > -1)\r\n      [...elements].map((el: any) => {\r\n        return el.classList.remove(\"selected\");\r\n      });\r\n    for (let i = 1; i < 12; i++) {\r\n      elements = document.getElementsByClassName(\"found\" + i);\r\n      if (elements.length > -1)\r\n        [...elements].map((el: any) => {\r\n          return el.classList.remove(\"found\" + i);\r\n        });\r\n    }\r\n    this.setState({ matrix, combine });\r\n  }\r\n  reveal(index: number, classToApply: string) {\r\n    const combine = this.state.combine;\r\n    combine[index].selected = true;\r\n    combine[index].classToApply = classToApply;\r\n    this.setState({ combine });\r\n  }\r\n  gameComplete() {\r\n    alert(\"Game Complete\");\r\n  }\r\n  changeLevel(level: any) {\r\n    this.level = \"Level \" + level;\r\n    if (this.level === \"Level 1\") {\r\n      this.height = 6;\r\n      this.width = 6;\r\n      this.wordList = this.wordList1;\r\n      this.wordListHindi = this.wordListHindi1;\r\n    } else if (this.level === \"Level 2\") {\r\n      this.height = 8;\r\n      this.width = 8;\r\n      this.wordList = this.wordList2;\r\n      this.wordListHindi = this.wordListHindi2;\r\n    } else {\r\n      this.height = 10;\r\n      this.width = 10;\r\n      this.wordList = this.wordList3;\r\n      this.wordListHindi = this.wordListHindi3;\r\n    }\r\n    this.reCreate();\r\n    this.setState({});\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br></br>\r\n        <Row\r\n          className=\"justify-content-center text-center\"\r\n          style={{ marginBottom: \"15px\" }}\r\n        >\r\n          <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n            <ButtonGroup className=\"mr-2\" aria-label=\"First group1\">\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                  {this.level}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 1)}>\r\n                    {\" \"}\r\n                    Level 1\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 2)}>\r\n                    {\" \"}\r\n                    Level 2\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 3)}>\r\n                    {\" \"}\r\n                    Level 3\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n            <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n              <Button variant=\"outline-dark\" onClick={this.reCreate.bind(this)}>\r\n                New Game\r\n              </Button>{\" \"}\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Row>{\" \"}\r\n        <Row className=\"justify-content-center text-center\">\r\n          <div>\r\n            <table>\r\n              <tbody>\r\n                {this.state.matrix.map((i: any, index: any) => (\r\n                  <tr key={index}>\r\n                    {i.map((j: any, index2: any) => {\r\n                      const props: any = {\r\n                        x: j.x,\r\n                        y: j.y,\r\n                      };\r\n                      return (\r\n                        <td key={index2} className=\"td\">\r\n                          <div\r\n                            key={j.x + \"\" + j.y}\r\n                            {...props}\r\n                            className={\"puzzleSquare\"}\r\n                            style={{\r\n                              width: \"40px\",\r\n                              height: \"40px\",\r\n                              lineHeight: \"40px\",\r\n                            }}\r\n                          >\r\n                            {j.letter}\r\n                          </div>\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Row>\r\n        <Row\r\n          className=\"justify-content-center text-center\"\r\n          style={{ marginTop: \"15px\" }}\r\n        >\r\n          <Col>\r\n            --------------------------- Find These words\r\n            ---------------------------\r\n          </Col>\r\n        </Row>{\" \"}\r\n        <Row className=\"justify-content-center text-center\">\r\n          {this.wordList1.map((word: string, index: any) => {\r\n            return (\r\n              <>\r\n                <ButtonGroup className=\"mr-2\" aria-label=\"Second group\">\r\n                  <Button\r\n                    key={index}\r\n                    className={\r\n                      \"btn-disabled \" + this.state.combine[index].classToApply\r\n                    }\r\n                    variant={\" outline-secondary\"}\r\n                    style={{ width: \"100px\", marginTop: \"15px\" }}\r\n                  >\r\n                    {this.state.combine[index].selected\r\n                      ? this.state.combine[index].wordHindi\r\n                      : this.state.combine[index].word}\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","export const WordFind = function () {\r\n  // Letters used to fill blank spots in the puzzle\r\n  const LETTERS = \"ABCDEFGHIJKLMNOPRSTUVWY\";\r\n  // The list of all the possible orientations\r\n  var allOrientations = [\r\n    \"horizontal\",\r\n    \"horizontalBack\",\r\n    \"vertical\",\r\n    \"verticalUp\",\r\n    \"diagonal\",\r\n    \"diagonalUp\",\r\n    \"diagonalBack\",\r\n    \"diagonalUpBack\",\r\n  ];\r\n\r\n  var orientations = {\r\n    horizontal: function (x, y, i) {\r\n      return { x: x + i, y: y };\r\n    },\r\n    horizontalBack: function (x, y, i) {\r\n      return { x: x - i, y: y };\r\n    },\r\n    vertical: function (x, y, i) {\r\n      return { x: x, y: y + i };\r\n    },\r\n    verticalUp: function (x, y, i) {\r\n      return { x: x, y: y - i };\r\n    },\r\n    diagonal: function (x, y, i) {\r\n      return { x: x + i, y: y + i };\r\n    },\r\n    diagonalBack: function (x, y, i) {\r\n      return { x: x - i, y: y + i };\r\n    },\r\n    diagonalUp: function (x, y, i) {\r\n      return { x: x + i, y: y - i };\r\n    },\r\n    diagonalUpBack: function (x, y, i) {\r\n      return { x: x - i, y: y - i };\r\n    },\r\n  };\r\n\r\n  var checkOrientations = {\r\n    horizontal: function (x, y, h, w, l) {\r\n      return w >= x + l;\r\n    },\r\n    horizontalBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l;\r\n    },\r\n    vertical: function (x, y, h, w, l) {\r\n      return h >= y + l;\r\n    },\r\n    verticalUp: function (x, y, h, w, l) {\r\n      return y + 1 >= l;\r\n    },\r\n    diagonal: function (x, y, h, w, l) {\r\n      return w >= x + l && h >= y + l;\r\n    },\r\n    diagonalBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l && h >= y + l;\r\n    },\r\n    diagonalUp: function (x, y, h, w, l) {\r\n      return w >= x + l && y + 1 >= l;\r\n    },\r\n    diagonalUpBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l && y + 1 >= l;\r\n    },\r\n  };\r\n\r\n  var skipOrientations = {\r\n    horizontal: function (x, y, l) {\r\n      return { x: 0, y: y + 1 };\r\n    },\r\n    horizontalBack: function (x, y, l) {\r\n      return { x: l - 1, y: y };\r\n    },\r\n    vertical: function (x, y, l) {\r\n      return { x: 0, y: y + 100 };\r\n    },\r\n    verticalUp: function (x, y, l) {\r\n      return { x: 0, y: l - 1 };\r\n    },\r\n    diagonal: function (x, y, l) {\r\n      return { x: 0, y: y + 1 };\r\n    },\r\n    diagonalBack: function (x, y, l) {\r\n      return { x: l - 1, y: x >= l - 1 ? y + 1 : y };\r\n    },\r\n    diagonalUp: function (x, y, l) {\r\n      return { x: 0, y: y < l - 1 ? l - 1 : y + 1 };\r\n    },\r\n    diagonalUpBack: function (x, y, l) {\r\n      return { x: l - 1, y: x >= l - 1 ? y + 1 : y };\r\n    },\r\n  };\r\n  var fillPuzzle = function (words, options) {\r\n    var puzzle = [],\r\n      i,\r\n      j,\r\n      len;\r\n\r\n    // initialize the puzzle with blanks\r\n    for (i = 0; i < options.height; i++) {\r\n      puzzle.push([]);\r\n      for (j = 0; j < options.width; j++) {\r\n        puzzle[i].push(\"\");\r\n      }\r\n    }\r\n\r\n    // add each word into the puzzle one at a time\r\n    for (i = 0, len = words.length; i < len; i++) {\r\n      if (!placeWordInPuzzle(puzzle, options, words[i])) {\r\n        // if a word didn't fit in the puzzle, give up\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // return the puzzle\r\n    return puzzle;\r\n  };\r\n\r\n  var placeWordInPuzzle = function (puzzle, options, word) {\r\n    // find all of the best locations where this word would fit\r\n    var locations = findBestLocations(puzzle, options, word);\r\n\r\n    if (locations.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // select a location at random and place the word there\r\n    var sel = locations[Math.floor(Math.random() * locations.length)];\r\n    placeWord(puzzle, word, sel.x, sel.y, orientations[sel.orientation]);\r\n\r\n    return true;\r\n  };\r\n  var findBestLocations = function (puzzle, options, word) {\r\n    var locations = [],\r\n      height = options.height,\r\n      width = options.width,\r\n      wordLength = word.length,\r\n      maxOverlap = 0; // we'll start looking at overlap = 0\r\n\r\n    // loop through all of the possible orientations at this position\r\n    for (var k = 0, len = options.orientations.length; k < len; k++) {\r\n      var orientation = options.orientations[k],\r\n        check = checkOrientations[orientation],\r\n        next = orientations[orientation],\r\n        skipTo = skipOrientations[orientation],\r\n        x = 0,\r\n        y = 0;\r\n\r\n      // loop through every position on the board\r\n      while (y < height) {\r\n        // see if this orientation is even possible at this location\r\n        if (check(x, y, height, width, wordLength)) {\r\n          // determine if the word fits at the current position\r\n          var overlap = calcOverlap(word, puzzle, x, y, next);\r\n\r\n          // if the overlap was bigger than previous overlaps that we've seen\r\n          if (\r\n            overlap >= maxOverlap ||\r\n            (!options.preferOverlap && overlap > -1)\r\n          ) {\r\n            maxOverlap = overlap;\r\n            locations.push({\r\n              x: x,\r\n              y: y,\r\n              orientation: orientation,\r\n              overlap: overlap,\r\n            });\r\n          }\r\n\r\n          x++;\r\n          if (x >= width) {\r\n            x = 0;\r\n            y++;\r\n          }\r\n        } else {\r\n          // if current cell is invalid, then skip to the next cell where\r\n          // this orientation is possible. this greatly reduces the number\r\n          // of checks that we have to do overall\r\n          var nextPossible = skipTo(x, y, wordLength);\r\n          x = nextPossible.x;\r\n          y = nextPossible.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // finally prune down all of the possible locations we found by\r\n    // only using the ones with the maximum overlap that we calculated\r\n    return options.preferOverlap\r\n      ? pruneLocations(locations, maxOverlap)\r\n      : locations;\r\n  };\r\n  var calcOverlap = function (word, puzzle, x, y, fnGetSquare) {\r\n    var overlap = 0;\r\n\r\n    // traverse the squares to determine if the word fits\r\n    for (var i = 0, len = word.length; i < len; i++) {\r\n      var next = fnGetSquare(x, y, i),\r\n        square = puzzle[next.y][next.x];\r\n\r\n      // if the puzzle square already contains the letter we\r\n      // are looking for, then count it as an overlap square\r\n      if (square === word[i]) {\r\n        overlap++;\r\n      }\r\n      // if it contains a different letter, than our word doesn't fit\r\n      // here, return -1\r\n      else if (square !== \"\") {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    // if the entire word is overlapping, skip it to ensure words aren't\r\n    // hidden in other words\r\n    return overlap;\r\n  };\r\n  var pruneLocations = function (locations, overlap) {\r\n    var pruned = [];\r\n    for (var i = 0, len = locations.length; i < len; i++) {\r\n      if (locations[i].overlap >= overlap) {\r\n        pruned.push(locations[i]);\r\n      }\r\n    }\r\n    return pruned;\r\n  };\r\n  var placeWord = function (puzzle, word, x, y, fnGetSquare) {\r\n    for (var i = 0, len = word.length; i < len; i++) {\r\n      var next = fnGetSquare(x, y, i);\r\n      puzzle[next.y][next.x] = word[i];\r\n    }\r\n  };\r\n\r\n  return {\r\n    validOrientations: allOrientations,\r\n\r\n    orientations: orientations,\r\n    newPuzzle: function (words, settings) {\r\n      if (!words.length) {\r\n        throw new Error(\"Zero words provided\");\r\n      }\r\n      var wordList,\r\n        puzzle,\r\n        attempts = 0,\r\n        gridGrowths = 0,\r\n        opts = settings || {};\r\n\r\n      // copy and sort the words by length, inserting words into the puzzle\r\n      // from longest to shortest works out the best\r\n      wordList = words.slice(0).sort();\r\n\r\n      // initialize the options\r\n      var maxWordLength = wordList[0].length;\r\n      var options = {\r\n        height: opts.height || maxWordLength,\r\n        width: opts.width || maxWordLength,\r\n        orientations: opts.orientations || allOrientations,\r\n        fillBlanks: opts.fillBlanks !== undefined ? opts.fillBlanks : true,\r\n        allowExtraBlanks:\r\n          opts.allowExtraBlanks !== undefined ? opts.allowExtraBlanks : true,\r\n        maxAttempts: opts.maxAttempts || 3,\r\n        maxGridGrowth:\r\n          opts.maxGridGrowth !== undefined ? opts.maxGridGrowth : 10,\r\n        preferOverlap:\r\n          opts.preferOverlap !== undefined ? opts.preferOverlap : true,\r\n      };\r\n\r\n      // add the words to the puzzle\r\n      // since puzzles are random, attempt to create a valid one up to\r\n      // maxAttempts and then increase the puzzle size and try again\r\n      while (!puzzle) {\r\n        while (!puzzle && attempts++ < options.maxAttempts) {\r\n          puzzle = fillPuzzle(wordList, options);\r\n        }\r\n\r\n        if (!puzzle) {\r\n          gridGrowths++;\r\n          if (gridGrowths > options.maxGridGrowth) {\r\n            throw new Error(\r\n              `No valid ${options.width}x${options.height} grid found and not allowed to grow more`\r\n            );\r\n          }\r\n          console.log(\r\n            `No valid ${options.width}x${options.height} grid found after ${\r\n              attempts - 1\r\n            } attempts, trying with bigger grid`\r\n          );\r\n          options.height++;\r\n          options.width++;\r\n          attempts = 0;\r\n        }\r\n      }\r\n\r\n      // fill in empty spaces with random letters\r\n      if (options.fillBlanks) {\r\n        var lettersToAdd,\r\n          fillingBlanksCount = 0,\r\n          extraLetterGenerator;\r\n        if (typeof options.fillBlanks === \"function\") {\r\n          extraLetterGenerator = options.fillBlanks;\r\n        } else if (typeof options.fillBlanks === \"string\") {\r\n          lettersToAdd = options.fillBlanks.toLowerCase().split(\"\");\r\n          extraLetterGenerator = () =>\r\n            lettersToAdd.pop() || (fillingBlanksCount++ && \"\");\r\n        } else {\r\n          extraLetterGenerator = () =>\r\n            LETTERS[Math.floor(Math.random() * LETTERS.length)];\r\n        }\r\n        var extraLettersCount = this.fillBlanks({\r\n          puzzle,\r\n          extraLetterGenerator: extraLetterGenerator,\r\n        });\r\n        if (lettersToAdd && lettersToAdd.length) {\r\n          throw new Error(\r\n            `Some extra letters provided were not used: ${lettersToAdd}`\r\n          );\r\n        }\r\n        if (lettersToAdd && fillingBlanksCount && !options.allowExtraBlanks) {\r\n          throw new Error(\r\n            `${fillingBlanksCount} extra letters were missing to fill the grid`\r\n          );\r\n        }\r\n        var gridFillPercent =\r\n          100 * (1 - extraLettersCount / (options.width * options.height));\r\n        console.log(\r\n          `Blanks filled with ${extraLettersCount} random letters - Final grid is filled at ${gridFillPercent.toFixed(\r\n            0\r\n          )}%`\r\n        );\r\n      }\r\n\r\n      return puzzle;\r\n    },\r\n    fillBlanks: function ({ puzzle, extraLetterGenerator }) {\r\n      var extraLettersCount = 0;\r\n      for (var i = 0, height = puzzle.length; i < height; i++) {\r\n        var row = puzzle[i];\r\n        for (var j = 0, width = row.length; j < width; j++) {\r\n          if (!puzzle[i][j]) {\r\n            puzzle[i][j] = extraLetterGenerator();\r\n            extraLettersCount++;\r\n          }\r\n        }\r\n      }\r\n      return extraLettersCount;\r\n    },\r\n\r\n    solve: function (puzzle, words) {\r\n      var options = {\r\n          height: puzzle.length,\r\n          width: puzzle[0].length,\r\n          orientations: allOrientations,\r\n          preferOverlap: true,\r\n        },\r\n        found = [],\r\n        notFound = [];\r\n\r\n      for (var i = 0, len = words.length; i < len; i++) {\r\n        var word = words[i],\r\n          locations = findBestLocations(puzzle, options, word);\r\n\r\n        if (locations.length > 0 && locations[0].overlap === word.length) {\r\n          locations[0].word = word;\r\n          found.push(locations[0]);\r\n        } else {\r\n          notFound.push(word);\r\n        }\r\n      }\r\n\r\n      return { found: found, notFound: notFound };\r\n    },\r\n\r\n    print: function (puzzle) {\r\n      var puzzleString = \"\";\r\n      for (var i = 0, height = puzzle.length; i < height; i++) {\r\n        var row = puzzle[i];\r\n        for (var j = 0, width = row.length; j < width; j++) {\r\n          puzzleString += (row[j] === \"\" ? \" \" : row[j]) + \" \";\r\n        }\r\n        puzzleString += \"\\n\";\r\n      }\r\n\r\n      console.log(puzzleString);\r\n      return puzzleString;\r\n    },\r\n  };\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"./colors.css\";\nimport { DashboardComponent } from \"./component/dashboard\";\nimport { ScrabbleComponent } from \"./component/Scabble\";\nimport { WordSearchComponent } from \"./component/WordSearch\";\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"light\" variant=\"light\">\n          <Nav className=\"mr-auto\">\n            <NavItem>\n              <Nav.Link as={Link} to={\"/Scrabble\"}>\n                Scrabble\n              </Nav.Link>\n            </NavItem>\n            <NavItem>\n              <Nav.Link as={Link} to={\"/WordSearch\"}>\n                WordSearchComponent\n              </Nav.Link>\n            </NavItem>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <Route path={[\"/WordSearch\", \"/hkd-react/WordSearch\"]}>\n            <WordSearchComponent />\n          </Route>\n          <Route path={[\"/Scrabble\", \"/hkd-react/Scrabble\", \"/\"]}>\n            <ScrabbleComponent />\n          </Route>\n        </Switch>\n        <DashboardComponent></DashboardComponent>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}