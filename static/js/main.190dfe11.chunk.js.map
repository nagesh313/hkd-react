{"version":3,"sources":["component/Scabble.tsx","component/data.ts","component/WordSearch.tsx","component/WF.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScrabbleComponent","props","word","hint","display","selection","disabled","successJumbotron","failureJumbotron","hintJumbotron","failed","success","hintFlag","selectionIndex","level","newGame","array","sort","Math","random","this","wordClick","charAt","length","findIndex","e","index","console","log","pop","setState","join","Jumbotron","className","aria-hidden","Button","variant","onClick","bind","letter","clickIndex","event","push","flat","shuffleArray","style","marginBottom","Container","Row","ButtonToolbar","aria-label","ButtonGroup","Dropdown","Toggle","id","Menu","Item","onSelect","changeLevel","undo","showHint","split","map","leter","hidden","check","Component","orientations","horizontal","x","y","i","horizontalBack","vertical","verticalUp","diagonal","diagonalBack","diagonalUp","diagonalUpBack","allOrientations","WordSearchComponent","width","height","wordList","wordListHindi","wordList1","wordList2","wordList3","wordListHindi1","wordListHindi2","wordListHindi3","startSquare","selectedSquares","curWord","curOrientation","matrix","createMatrix","combine","forEach","wordHindi","selected","state","createBindings","window","navigator","msPointerEnabled","$","on","startTurn","select","endTurn","mousedown","mouseenter","mouseMove","mouseup","touchMove","target","lastSquare","backTo","len","removeClass","splice","substr","x1","attributes","value","x2","x3","currentTarget","x4","newOrientation","calcOrientation","text","x11","x21","x31","x41","orientation","playTurn","addClass","textContent","y1","y2","nextPos","nextFn","square","indexOf","classList","add","xPos","originalEvent","touches","pageX","yPos","pageY","targetElement","document","elementFromPoint","contains","reveal","filter","w","gameComplete","options","preferOverlap","fill","LETTERS","checkOrientations","h","l","skipOrientations","fillPuzzle","words","j","puzzle","placeWordInPuzzle","locations","findBestLocations","sel","floor","placeWord","wordLength","maxOverlap","k","next","skipTo","overlap","calcOverlap","nextPossible","pruneLocations","fnGetSquare","pruned","validOrientations","newPuzzle","settings","Error","attempts","gridGrowths","opts","maxWordLength","slice","fillBlanks","undefined","allowExtraBlanks","maxAttempts","maxGridGrowth","lettersToAdd","extraLetterGenerator","fillingBlanksCount","toLowerCase","extraLettersCount","gridFillPercent","toFixed","solve","found","notFound","print","puzzleString","row","WordFind","alert","reCreate","index2","lineHeight","marginTop","Col","App","Navbar","bg","Nav","NavItem","Link","as","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.190dfe11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Container,\r\n  Dropdown,\r\n  Jumbotron,\r\n  Row,\r\n} from \"react-bootstrap\";\r\n\r\nexport class ScrabbleComponent extends Component<{}, {}> {\r\n  word: any;\r\n  hint = \"\";\r\n  display: any;\r\n  selection: any;\r\n  disabled: any;\r\n  successJumbotron: any;\r\n  failureJumbotron: any;\r\n  hintJumbotron: any = \"\";\r\n  failed = false;\r\n  success = false;\r\n  hintFlag = false;\r\n  selectionIndex: any;\r\n  level = \"Level 1\";\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.newGame();\r\n  }\r\n  shuffleArray(array: any) {\r\n    array.sort(() => Math.random() - 0.5);\r\n    return array;\r\n  }\r\n  showHint() {\r\n    // this.hintFlag = true;\r\n    // this.selection.push(this.word.charAt(this.selection.length));\r\n    this.wordClick(\r\n      this.word.charAt(this.selection.length),\r\n      this.display.findIndex((e: any, index: any) => {\r\n        if (this.disabled[index]) {\r\n          return false;\r\n        } else {\r\n          return e === this.word.charAt(this.selection.length);\r\n        }\r\n      }),\r\n      {}\r\n    );\r\n  }\r\n  undo() {\r\n    console.log(this);\r\n    this.selection.pop();\r\n    this.hintFlag = false;\r\n    this.disabled[this.selectionIndex.pop()] = false;\r\n    this.setState({});\r\n  }\r\n  check() {\r\n    if (this.selection.join(\"\") === this.word) {\r\n      this.failed = false;\r\n      this.success = true;\r\n      this.successJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>You Win</h1>\r\n          <p>\r\n            <i className=\"fa fa-smile-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    } else {\r\n      this.failed = true;\r\n      this.success = false;\r\n      this.failureJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>Try again!</h1>\r\n          <p>\r\n            <i className=\"fa fa-frown-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    }\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n\r\n  wordClick(letter: any, clickIndex: any, event: any) {\r\n    console.log(event);\r\n    console.log(letter);\r\n    this.selection.push(letter);\r\n    this.selectionIndex.push(clickIndex);\r\n    this.disabled[clickIndex] = true;\r\n    if (this.disabled.flat().length === this.display.length) {\r\n      this.hintFlag = true;\r\n    }\r\n    this.setState({});\r\n  }\r\n  newGame() {\r\n    if (this.level === \"Level 1\") {\r\n      this.word = \"early\";\r\n      this.hint = \"जल्दी\";\r\n    } else if (this.level === \"Level 2\") {\r\n      this.word = \"Squeeze\";\r\n      this.hint = \"निचोड़ना\";\r\n    } else {\r\n      this.word = \"abnormal\";\r\n      this.hint = \"असामान्य\";\r\n    }\r\n    this.display = [...this.word];\r\n    this.display = this.shuffleArray(this.display);\r\n    this.selection = [];\r\n    this.selectionIndex = [];\r\n    this.disabled = [];\r\n    this.failed = false;\r\n    this.success = false;\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n  changeLevel(level: any) {\r\n    this.level = \"Level \" + level;\r\n    this.newGame();\r\n    this.setState({});\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n        <Container className=\"justify-content-center\">\r\n          <Row className=\"justify-content-center\"></Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group1\">\r\n                <Dropdown>\r\n                  <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                    {this.level}\r\n                  </Dropdown.Toggle>\r\n\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 1)}>\r\n                      {\" \"}\r\n                      Level 1\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 2)}>\r\n                      {\" \"}\r\n                      Level 2\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={this.changeLevel.bind(this, 3)}>\r\n                      {\" \"}\r\n                      Level 3\r\n                    </Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.newGame.bind(this)}\r\n                >\r\n                  New Game\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  disabled={\r\n                    this.selectionIndex.length === 0 ||\r\n                    this.failed ||\r\n                    this.success\r\n                  }\r\n                  onClick={this.undo.bind(this)}\r\n                >\r\n                  Undo\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  disabled={this.hintFlag || this.failed || this.success}\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.showHint.bind(this)}\r\n                >\r\n                  Hint\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <Jumbotron className=\"text-center\">\r\n              <h1>Meaning</h1>\r\n              <p>{this.hint}</p>\r\n            </Jumbotron>\r\n          </Row>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.word.split(\"\").map((leter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"fill\" + index}\r\n                  >\r\n                    <Button variant=\"outline-primary\">\r\n                      {this.selection[index]}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <div style={{ marginBottom: \"8px\" }}></div>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.display.map((letter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"word\" + index}\r\n                  >\r\n                    <Button\r\n                      // hidden={this.disabled[index] === true}\r\n                      onClick={this.wordClick.bind(this, letter, index)}\r\n                      disabled={this.disabled[index] === true}\r\n                    >\r\n                      {letter}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>{\" \"}\r\n          <div style={{ marginBottom: \"8px\" }}></div>\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={this.selection.flat().length !== this.word.length}\r\n          >\r\n            <Button\r\n              disabled={this.success || this.failed}\r\n              onClick={this.check.bind(this)}\r\n            >\r\n              Check\r\n            </Button>\r\n          </Row>{\" \"}\r\n          <div style={{ marginBottom: \"8px\" }}></div>\r\n          <Row className=\"justify-content-center\" hidden={!this.hintFlag}>\r\n            {this.hintJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(this.success && !this.failed)}\r\n          >\r\n            {this.successJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(!this.success && this.failed)}\r\n          >\r\n            {this.failureJumbotron}\r\n          </Row>{\" \"}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","export const orientations: any = {\r\n  horizontal: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y };\r\n  },\r\n  horizontalBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y };\r\n  },\r\n  vertical: function (x: any, y: any, i: any) {\r\n    return { x: x, y: y + i };\r\n  },\r\n  verticalUp: function (x: any, y: any, i: any) {\r\n    return { x: x, y: y - i };\r\n  },\r\n  diagonal: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y + i };\r\n  },\r\n  diagonalBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y + i };\r\n  },\r\n  diagonalUp: function (x: any, y: any, i: any) {\r\n    return { x: x + i, y: y - i };\r\n  },\r\n  diagonalUpBack: function (x: any, y: any, i: any) {\r\n    return { x: x - i, y: y - i };\r\n  },\r\n};\r\nexport const allOrientations = [\r\n  \"horizontal\",\r\n  \"horizontalBack\",\r\n  \"vertical\",\r\n  \"verticalUp\",\r\n  \"diagonal\",\r\n  \"diagonalUp\",\r\n  \"diagonalBack\",\r\n  \"diagonalUpBack\",\r\n];\r\n","import $ from \"jquery\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Col,\r\n  Container,\r\n  Dropdown,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport { allOrientations, orientations } from \"./data\";\r\nimport { WordFind } from \"./WF\";\r\nexport class WordSearchComponent extends Component<\r\n  {},\r\n  {\r\n    matrix: any;\r\n    combine: any;\r\n  }\r\n> {\r\n  level = \"Level 1\";\r\n  width = 6;\r\n  height = 6;\r\n  wordList: any = [\"COME\", \"BEST\", \"JERK\", \"ERASE\", \"JAW\", \"ALLOW\"];\r\n  wordListHindi: any = [\r\n    \"आइए\",\r\n    \"श्रेष्ठ\",\r\n    \"मंदबुद्धि\",\r\n    \"मिटाना\",\r\n    \"जबड़ा\",\r\n    \"अनुमति\",\r\n  ];\r\n  wordList1: any = [\"COME\", \"BEST\", \"JERK\", \"ERASE\", \"JAW\", \"ALLOW\"];\r\n  wordList2: any = [\"ATTACK\", \"EAGER\", \"ERRATIC\", \"COLOUR\", \"SMALL\", \"SWALLOW\"];\r\n  wordList3: any = [\r\n    \"VIOLENT\",\r\n    \"WALKING\",\r\n    \"CAPTION\",\r\n    \"DECLINE\",\r\n    \"FASHION\",\r\n    \"SESSION\",\r\n  ];\r\n  wordListHindi1: any = [\r\n    \"आइए\",\r\n    \"श्रेष्ठ\",\r\n    \"मंदबुद्धि\",\r\n    \"मिटाना\",\r\n    \"जबड़ा\",\r\n    \"अनुमति\",\r\n  ];\r\n  wordListHindi2: any = [\"हमला\", \"उत्सुक\", \"त्रुटि\", \"रंग\", \"छोटा\", \"गटकना\"];\r\n  wordListHindi3: any = [\"हिंसक\", \"घूमना\", \"संबंध\", \"पतन\", \"विधान\", \"सत्र\"];\r\n  startSquare: any;\r\n  selectedSquares: any = [];\r\n  curWord: any;\r\n  curOrientation: any;\r\n  constructor(props: any) {\r\n    super(props);\r\n    const matrix = this.createMatrix();\r\n    const combine: any = [];\r\n    this.wordList.forEach((word: string, index: number) => {\r\n      combine.push({\r\n        word: word,\r\n        wordHindi: this.wordListHindi1[index],\r\n        selected: false,\r\n      });\r\n    });\r\n    this.state = { matrix, combine };\r\n  }\r\n  componentDidMount() {\r\n    this.createBindings();\r\n  }\r\n  componentDidUpdate() {\r\n    this.createBindings();\r\n  }\r\n  createBindings() {\r\n    if (window.navigator.msPointerEnabled) {\r\n      $(\".puzzleSquare\").on(\"MSPointerDown\", this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"MSPointerOver\", this.select.bind(this));\r\n      $(\".puzzleSquare\").on(\"MSPointerUp\", this.endTurn.bind(this));\r\n    } else {\r\n      $(\".puzzleSquare\").mousedown(this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").mouseenter(this.mouseMove.bind(this));\r\n      $(\".puzzleSquare\").mouseup(this.endTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchstart\", this.startTurn.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchmove\", this.touchMove.bind(this));\r\n      $(\".puzzleSquare\").on(\"touchend\", this.endTurn.bind(this));\r\n    }\r\n  }\r\n  select(target: any) {\r\n    // if the user hasn't started a word yet, just return\r\n    if (!this.startSquare) {\r\n      return;\r\n    }\r\n    // if the new square is actually the previous square, just return\r\n    var lastSquare = this.selectedSquares[this.selectedSquares.length - 1];\r\n    if (lastSquare === target) {\r\n      return;\r\n    }\r\n\r\n    // see if the user backed up and correct the selectedSquares state if\r\n    // they did\r\n    let backTo;\r\n    for (var i = 0, len = this.selectedSquares.length; i < len; i++) {\r\n      if (this.selectedSquares[i] === target) {\r\n        backTo = i + 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    while (backTo && backTo < this.selectedSquares.length) {\r\n      $(this.selectedSquares[this.selectedSquares.length - 1]).removeClass(\r\n        \"selected\"\r\n      );\r\n      this.selectedSquares.splice(backTo, 1);\r\n      this.curWord = this.curWord.substr(0, this.curWord.length - 1);\r\n    }\r\n    const x1: any = this.startSquare.attributes[\"x\"].value - 0;\r\n    const x2: any = this.startSquare.attributes[\"y\"].value - 0;\r\n    const x3: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"x\"].value - 0\r\n      : target.attributes[\"x\"].value - 0;\r\n    const x4: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"y\"].value - 0\r\n      : target.attributes[\"y\"].value - 0;\r\n    const newOrientation = this.calcOrientation(x1, x2, x3, x4);\r\n\r\n    if (newOrientation) {\r\n      this.selectedSquares = [this.startSquare];\r\n      this.curWord = $(this.startSquare).text();\r\n      if (lastSquare !== this.startSquare) {\r\n        $(lastSquare).removeClass(\"selected\");\r\n        lastSquare = this.startSquare;\r\n      }\r\n      this.curOrientation = newOrientation;\r\n    }\r\n\r\n    const x11: any = lastSquare.attributes[\"x\"].value - 0;\r\n    const x21: any = lastSquare.attributes[\"y\"].value - 0;\r\n    const x31: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"x\"].value - 0\r\n      : target.attributes[\"x\"].value - 0;\r\n    const x41: any = target.currentTarget\r\n      ? target.currentTarget.attributes[\"y\"].value - 0\r\n      : target.attributes[\"y\"].value - 0;\r\n    // see if the move is along the same orientation as the last move\r\n    var orientation = this.calcOrientation(x11, x21, x31, x41);\r\n\r\n    // if the new square isn't along a valid orientation, just ignore it.\r\n    // this makes selecting diagonal words less frustrating\r\n    if (!orientation) {\r\n      return;\r\n    }\r\n\r\n    // finally, if there was no previous orientation or this move is along\r\n    // the same orientation as the last move then play the move\r\n    if (!this.curOrientation || this.curOrientation === orientation) {\r\n      this.curOrientation = orientation;\r\n      this.playTurn(target.currentTarget ? target.currentTarget : target);\r\n    }\r\n  }\r\n  mouseMove(event: any) {\r\n    this.select(event);\r\n  }\r\n  startTurn(event: any) {\r\n    $(event.target).addClass(\"selected\");\r\n    this.startSquare = event.target;\r\n    this.selectedSquares.push(event.target);\r\n    this.curWord = event.target.textContent;\r\n  }\r\n  calcOrientation(x1: any, y1: any, x2: any, y2: any) {\r\n    for (var orientation in orientations) {\r\n      var nextFn = orientations[orientation];\r\n      var nextPos = nextFn(x1, y1, 1);\r\n\r\n      if (nextPos.x === x2 && nextPos.y === y2) {\r\n        return orientation;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  playTurn(square: any) {\r\n    // make sure we are still forming a valid word\r\n    for (var i = 0, len = this.wordList.length; i < len; i++) {\r\n      if (this.wordList[i].indexOf(this.curWord + square.textContent) === 0) {\r\n        square.classList.add(\"selected\");\r\n        this.selectedSquares.push(square);\r\n        this.curWord += square.textContent;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  touchMove(e: any) {\r\n    var xPos = e.originalEvent.touches[0].pageX;\r\n    var yPos = e.originalEvent.touches[0].pageY;\r\n    var targetElement: any = document.elementFromPoint(xPos, yPos);\r\n    if (targetElement.classList.contains(\"puzzleSquare\"))\r\n      this.select(targetElement);\r\n  }\r\n  endTurn() {\r\n    // see if we formed a valid word\r\n    for (var i = 0, len = this.wordList.length; i < len; i++) {\r\n      if (this.wordList[i] === this.curWord) {\r\n        $(\".selected\").addClass(\"found\");\r\n        this.reveal(this.wordList.indexOf(this.curWord));\r\n        $('input.word[value=\"' + this.curWord + '\"]').addClass(\"wordFound\");\r\n        if (\r\n          this.state.combine.filter((w: any) => {\r\n            return w.selected === false;\r\n          }).length === 0\r\n        ) {\r\n          this.gameComplete();\r\n        }\r\n      }\r\n    }\r\n    // reset the turn\r\n    $(\".selected\").removeClass(\"selected\");\r\n    this.startSquare = null;\r\n    this.selectedSquares = [];\r\n    this.curWord = \"\";\r\n    this.curOrientation = null;\r\n  }\r\n  createMatrix() {\r\n    var options = {\r\n      height: this.height,\r\n      width: this.width,\r\n      orientations: allOrientations,\r\n      preferOverlap: false,\r\n    };\r\n    const WF: any = WordFind();\r\n    const fill = WF.newPuzzle(this.wordList, options);\r\n    let matrix: any = [];\r\n    for (let i = 0; i < this.width; i++) {\r\n      matrix[i] = [];\r\n      for (let j = 0; j < this.height; j++) {\r\n        matrix[i][j] = { x: i, y: j, selected: false, letter: fill[i][j] };\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n  reCreate() {\r\n    const matrix = this.createMatrix();\r\n    const combine: any = [];\r\n    this.wordList1.forEach((word: string, index: number) => {\r\n      combine.push({\r\n        word: word,\r\n        wordHindi: this.wordListHindi1[index],\r\n        selected: false,\r\n      });\r\n    });\r\n    this.setState({ matrix, combine });\r\n  }\r\n  reveal(index: number) {\r\n    const combine = this.state.combine;\r\n    combine[index].selected = true;\r\n    this.setState({ combine });\r\n  }\r\n  gameComplete() {\r\n    alert(\"Game Complete\");\r\n  }\r\n  changeLevel(level: any) {\r\n    this.level = \"Level \" + level;\r\n    if (this.level === \"Level 1\") {\r\n      this.height = 6;\r\n      this.width = 6;\r\n      this.wordList = this.wordList1;\r\n      this.wordListHindi = this.wordListHindi1;\r\n    } else if (this.level === \"Level 2\") {\r\n      this.height = 8;\r\n      this.width = 8;\r\n      this.wordList = this.wordList2;\r\n      this.wordListHindi = this.wordListHindi2;\r\n    } else {\r\n      this.height = 10;\r\n      this.width = 10;\r\n      this.wordList = this.wordList3;\r\n      this.wordListHindi = this.wordListHindi3;\r\n    }\r\n    this.reCreate();\r\n    this.setState({});\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br></br>\r\n        <Row\r\n          className=\"justify-content-center text-center\"\r\n          style={{ marginBottom: \"15px\" }}\r\n        >\r\n          <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n            <ButtonGroup className=\"mr-2\" aria-label=\"First group1\">\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                  {this.level}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 1)}>\r\n                    {\" \"}\r\n                    Level 1\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 2)}>\r\n                    {\" \"}\r\n                    Level 2\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onSelect={this.changeLevel.bind(this, 3)}>\r\n                    {\" \"}\r\n                    Level 3\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n            <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n              <Button variant=\"outline-dark\" onClick={this.reCreate.bind(this)}>\r\n                New Game\r\n              </Button>{\" \"}\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Row>{\" \"}\r\n        <Row className=\"justify-content-center text-center\">\r\n          <div>\r\n            <table>\r\n              <tbody>\r\n                {this.state.matrix.map((i: any, index: any) => (\r\n                  <tr key={index}>\r\n                    {i.map((j: any, index2: any) => {\r\n                      const props: any = {\r\n                        x: j.x,\r\n                        y: j.y,\r\n                      };\r\n                      return (\r\n                        <td key={index2} className=\"td\">\r\n                          <div\r\n                            key={j.x + \"\" + j.y}\r\n                            {...props}\r\n                            className={\"puzzleSquare\"}\r\n                            style={{\r\n                              width: \"40px\",\r\n                              height: \"40px\",\r\n                              lineHeight: \"40px\",\r\n                            }}\r\n                          >\r\n                            {j.letter}\r\n                          </div>\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </Row>\r\n        <Row\r\n          className=\"justify-content-center text-center\"\r\n          style={{ marginTop: \"15px\" }}\r\n        >\r\n          <Col>\r\n            --------------------------- Find These words\r\n            ---------------------------\r\n          </Col>\r\n        </Row>{\" \"}\r\n        <Row className=\"justify-content-center text-center\">\r\n          {this.wordList1.map((word: string, index: any) => {\r\n            return (\r\n              <>\r\n                <ButtonGroup className=\"mr-2\" aria-label=\"Second group\">\r\n                  <Button\r\n                    key={index}\r\n                    variant={\r\n                      this.state.combine[index].selected ? \"success\" : \"primary\"\r\n                    }\r\n                    style={{ width: \"100px\", marginTop: \"15px\" }}\r\n                    onClick={this.reveal.bind(this, index)}\r\n                  >\r\n                    {this.state.combine[index].selected\r\n                      ? this.state.combine[index].wordHindi\r\n                      : this.state.combine[index].word}\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </>\r\n            );\r\n          })}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","export const WordFind = function () {\r\n  // Letters used to fill blank spots in the puzzle\r\n  const LETTERS = \"ABCDEFGHIJKLMNOPRSTUVWY\";\r\n  // The list of all the possible orientations\r\n  var allOrientations = [\r\n    \"horizontal\",\r\n    \"horizontalBack\",\r\n    \"vertical\",\r\n    \"verticalUp\",\r\n    \"diagonal\",\r\n    \"diagonalUp\",\r\n    \"diagonalBack\",\r\n    \"diagonalUpBack\",\r\n  ];\r\n\r\n  var orientations = {\r\n    horizontal: function (x, y, i) {\r\n      return { x: x + i, y: y };\r\n    },\r\n    horizontalBack: function (x, y, i) {\r\n      return { x: x - i, y: y };\r\n    },\r\n    vertical: function (x, y, i) {\r\n      return { x: x, y: y + i };\r\n    },\r\n    verticalUp: function (x, y, i) {\r\n      return { x: x, y: y - i };\r\n    },\r\n    diagonal: function (x, y, i) {\r\n      return { x: x + i, y: y + i };\r\n    },\r\n    diagonalBack: function (x, y, i) {\r\n      return { x: x - i, y: y + i };\r\n    },\r\n    diagonalUp: function (x, y, i) {\r\n      return { x: x + i, y: y - i };\r\n    },\r\n    diagonalUpBack: function (x, y, i) {\r\n      return { x: x - i, y: y - i };\r\n    },\r\n  };\r\n\r\n  var checkOrientations = {\r\n    horizontal: function (x, y, h, w, l) {\r\n      return w >= x + l;\r\n    },\r\n    horizontalBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l;\r\n    },\r\n    vertical: function (x, y, h, w, l) {\r\n      return h >= y + l;\r\n    },\r\n    verticalUp: function (x, y, h, w, l) {\r\n      return y + 1 >= l;\r\n    },\r\n    diagonal: function (x, y, h, w, l) {\r\n      return w >= x + l && h >= y + l;\r\n    },\r\n    diagonalBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l && h >= y + l;\r\n    },\r\n    diagonalUp: function (x, y, h, w, l) {\r\n      return w >= x + l && y + 1 >= l;\r\n    },\r\n    diagonalUpBack: function (x, y, h, w, l) {\r\n      return x + 1 >= l && y + 1 >= l;\r\n    },\r\n  };\r\n\r\n  var skipOrientations = {\r\n    horizontal: function (x, y, l) {\r\n      return { x: 0, y: y + 1 };\r\n    },\r\n    horizontalBack: function (x, y, l) {\r\n      return { x: l - 1, y: y };\r\n    },\r\n    vertical: function (x, y, l) {\r\n      return { x: 0, y: y + 100 };\r\n    },\r\n    verticalUp: function (x, y, l) {\r\n      return { x: 0, y: l - 1 };\r\n    },\r\n    diagonal: function (x, y, l) {\r\n      return { x: 0, y: y + 1 };\r\n    },\r\n    diagonalBack: function (x, y, l) {\r\n      return { x: l - 1, y: x >= l - 1 ? y + 1 : y };\r\n    },\r\n    diagonalUp: function (x, y, l) {\r\n      return { x: 0, y: y < l - 1 ? l - 1 : y + 1 };\r\n    },\r\n    diagonalUpBack: function (x, y, l) {\r\n      return { x: l - 1, y: x >= l - 1 ? y + 1 : y };\r\n    },\r\n  };\r\n  var fillPuzzle = function (words, options) {\r\n    var puzzle = [],\r\n      i,\r\n      j,\r\n      len;\r\n\r\n    // initialize the puzzle with blanks\r\n    for (i = 0; i < options.height; i++) {\r\n      puzzle.push([]);\r\n      for (j = 0; j < options.width; j++) {\r\n        puzzle[i].push(\"\");\r\n      }\r\n    }\r\n\r\n    // add each word into the puzzle one at a time\r\n    for (i = 0, len = words.length; i < len; i++) {\r\n      if (!placeWordInPuzzle(puzzle, options, words[i])) {\r\n        // if a word didn't fit in the puzzle, give up\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // return the puzzle\r\n    return puzzle;\r\n  };\r\n\r\n  var placeWordInPuzzle = function (puzzle, options, word) {\r\n    // find all of the best locations where this word would fit\r\n    var locations = findBestLocations(puzzle, options, word);\r\n\r\n    if (locations.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // select a location at random and place the word there\r\n    var sel = locations[Math.floor(Math.random() * locations.length)];\r\n    placeWord(puzzle, word, sel.x, sel.y, orientations[sel.orientation]);\r\n\r\n    return true;\r\n  };\r\n  var findBestLocations = function (puzzle, options, word) {\r\n    var locations = [],\r\n      height = options.height,\r\n      width = options.width,\r\n      wordLength = word.length,\r\n      maxOverlap = 0; // we'll start looking at overlap = 0\r\n\r\n    // loop through all of the possible orientations at this position\r\n    for (var k = 0, len = options.orientations.length; k < len; k++) {\r\n      var orientation = options.orientations[k],\r\n        check = checkOrientations[orientation],\r\n        next = orientations[orientation],\r\n        skipTo = skipOrientations[orientation],\r\n        x = 0,\r\n        y = 0;\r\n\r\n      // loop through every position on the board\r\n      while (y < height) {\r\n        // see if this orientation is even possible at this location\r\n        if (check(x, y, height, width, wordLength)) {\r\n          // determine if the word fits at the current position\r\n          var overlap = calcOverlap(word, puzzle, x, y, next);\r\n\r\n          // if the overlap was bigger than previous overlaps that we've seen\r\n          if (\r\n            overlap >= maxOverlap ||\r\n            (!options.preferOverlap && overlap > -1)\r\n          ) {\r\n            maxOverlap = overlap;\r\n            locations.push({\r\n              x: x,\r\n              y: y,\r\n              orientation: orientation,\r\n              overlap: overlap,\r\n            });\r\n          }\r\n\r\n          x++;\r\n          if (x >= width) {\r\n            x = 0;\r\n            y++;\r\n          }\r\n        } else {\r\n          // if current cell is invalid, then skip to the next cell where\r\n          // this orientation is possible. this greatly reduces the number\r\n          // of checks that we have to do overall\r\n          var nextPossible = skipTo(x, y, wordLength);\r\n          x = nextPossible.x;\r\n          y = nextPossible.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // finally prune down all of the possible locations we found by\r\n    // only using the ones with the maximum overlap that we calculated\r\n    return options.preferOverlap\r\n      ? pruneLocations(locations, maxOverlap)\r\n      : locations;\r\n  };\r\n  var calcOverlap = function (word, puzzle, x, y, fnGetSquare) {\r\n    var overlap = 0;\r\n\r\n    // traverse the squares to determine if the word fits\r\n    for (var i = 0, len = word.length; i < len; i++) {\r\n      var next = fnGetSquare(x, y, i),\r\n        square = puzzle[next.y][next.x];\r\n\r\n      // if the puzzle square already contains the letter we\r\n      // are looking for, then count it as an overlap square\r\n      if (square === word[i]) {\r\n        overlap++;\r\n      }\r\n      // if it contains a different letter, than our word doesn't fit\r\n      // here, return -1\r\n      else if (square !== \"\") {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    // if the entire word is overlapping, skip it to ensure words aren't\r\n    // hidden in other words\r\n    return overlap;\r\n  };\r\n  var pruneLocations = function (locations, overlap) {\r\n    var pruned = [];\r\n    for (var i = 0, len = locations.length; i < len; i++) {\r\n      if (locations[i].overlap >= overlap) {\r\n        pruned.push(locations[i]);\r\n      }\r\n    }\r\n    return pruned;\r\n  };\r\n  var placeWord = function (puzzle, word, x, y, fnGetSquare) {\r\n    for (var i = 0, len = word.length; i < len; i++) {\r\n      var next = fnGetSquare(x, y, i);\r\n      puzzle[next.y][next.x] = word[i];\r\n    }\r\n  };\r\n\r\n  return {\r\n    validOrientations: allOrientations,\r\n\r\n    orientations: orientations,\r\n    newPuzzle: function (words, settings) {\r\n      if (!words.length) {\r\n        throw new Error(\"Zero words provided\");\r\n      }\r\n      var wordList,\r\n        puzzle,\r\n        attempts = 0,\r\n        gridGrowths = 0,\r\n        opts = settings || {};\r\n\r\n      // copy and sort the words by length, inserting words into the puzzle\r\n      // from longest to shortest works out the best\r\n      wordList = words.slice(0).sort();\r\n\r\n      // initialize the options\r\n      var maxWordLength = wordList[0].length;\r\n      var options = {\r\n        height: opts.height || maxWordLength,\r\n        width: opts.width || maxWordLength,\r\n        orientations: opts.orientations || allOrientations,\r\n        fillBlanks: opts.fillBlanks !== undefined ? opts.fillBlanks : true,\r\n        allowExtraBlanks:\r\n          opts.allowExtraBlanks !== undefined ? opts.allowExtraBlanks : true,\r\n        maxAttempts: opts.maxAttempts || 3,\r\n        maxGridGrowth:\r\n          opts.maxGridGrowth !== undefined ? opts.maxGridGrowth : 10,\r\n        preferOverlap:\r\n          opts.preferOverlap !== undefined ? opts.preferOverlap : true,\r\n      };\r\n\r\n      // add the words to the puzzle\r\n      // since puzzles are random, attempt to create a valid one up to\r\n      // maxAttempts and then increase the puzzle size and try again\r\n      while (!puzzle) {\r\n        while (!puzzle && attempts++ < options.maxAttempts) {\r\n          puzzle = fillPuzzle(wordList, options);\r\n        }\r\n\r\n        if (!puzzle) {\r\n          gridGrowths++;\r\n          if (gridGrowths > options.maxGridGrowth) {\r\n            throw new Error(\r\n              `No valid ${options.width}x${options.height} grid found and not allowed to grow more`\r\n            );\r\n          }\r\n          console.log(\r\n            `No valid ${options.width}x${options.height} grid found after ${\r\n              attempts - 1\r\n            } attempts, trying with bigger grid`\r\n          );\r\n          options.height++;\r\n          options.width++;\r\n          attempts = 0;\r\n        }\r\n      }\r\n\r\n      // fill in empty spaces with random letters\r\n      if (options.fillBlanks) {\r\n        var lettersToAdd,\r\n          fillingBlanksCount = 0,\r\n          extraLetterGenerator;\r\n        if (typeof options.fillBlanks === \"function\") {\r\n          extraLetterGenerator = options.fillBlanks;\r\n        } else if (typeof options.fillBlanks === \"string\") {\r\n          lettersToAdd = options.fillBlanks.toLowerCase().split(\"\");\r\n          extraLetterGenerator = () =>\r\n            lettersToAdd.pop() || (fillingBlanksCount++ && \"\");\r\n        } else {\r\n          extraLetterGenerator = () =>\r\n            LETTERS[Math.floor(Math.random() * LETTERS.length)];\r\n        }\r\n        var extraLettersCount = this.fillBlanks({\r\n          puzzle,\r\n          extraLetterGenerator: extraLetterGenerator,\r\n        });\r\n        if (lettersToAdd && lettersToAdd.length) {\r\n          throw new Error(\r\n            `Some extra letters provided were not used: ${lettersToAdd}`\r\n          );\r\n        }\r\n        if (lettersToAdd && fillingBlanksCount && !options.allowExtraBlanks) {\r\n          throw new Error(\r\n            `${fillingBlanksCount} extra letters were missing to fill the grid`\r\n          );\r\n        }\r\n        var gridFillPercent =\r\n          100 * (1 - extraLettersCount / (options.width * options.height));\r\n        console.log(\r\n          `Blanks filled with ${extraLettersCount} random letters - Final grid is filled at ${gridFillPercent.toFixed(\r\n            0\r\n          )}%`\r\n        );\r\n      }\r\n\r\n      return puzzle;\r\n    },\r\n    fillBlanks: function ({ puzzle, extraLetterGenerator }) {\r\n      var extraLettersCount = 0;\r\n      for (var i = 0, height = puzzle.length; i < height; i++) {\r\n        var row = puzzle[i];\r\n        for (var j = 0, width = row.length; j < width; j++) {\r\n          if (!puzzle[i][j]) {\r\n            puzzle[i][j] = extraLetterGenerator();\r\n            extraLettersCount++;\r\n          }\r\n        }\r\n      }\r\n      return extraLettersCount;\r\n    },\r\n\r\n    solve: function (puzzle, words) {\r\n      var options = {\r\n          height: puzzle.length,\r\n          width: puzzle[0].length,\r\n          orientations: allOrientations,\r\n          preferOverlap: true,\r\n        },\r\n        found = [],\r\n        notFound = [];\r\n\r\n      for (var i = 0, len = words.length; i < len; i++) {\r\n        var word = words[i],\r\n          locations = findBestLocations(puzzle, options, word);\r\n\r\n        if (locations.length > 0 && locations[0].overlap === word.length) {\r\n          locations[0].word = word;\r\n          found.push(locations[0]);\r\n        } else {\r\n          notFound.push(word);\r\n        }\r\n      }\r\n\r\n      return { found: found, notFound: notFound };\r\n    },\r\n\r\n    print: function (puzzle) {\r\n      var puzzleString = \"\";\r\n      for (var i = 0, height = puzzle.length; i < height; i++) {\r\n        var row = puzzle[i];\r\n        for (var j = 0, width = row.length; j < width; j++) {\r\n          puzzleString += (row[j] === \"\" ? \" \" : row[j]) + \" \";\r\n        }\r\n        puzzleString += \"\\n\";\r\n      }\r\n\r\n      console.log(puzzleString);\r\n      return puzzleString;\r\n    },\r\n  };\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { ScrabbleComponent } from \"./component/Scabble\";\nimport { WordSearchComponent } from \"./component/WordSearch\";\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"light\" variant=\"light\">\n          <Nav className=\"mr-auto\">\n            <NavItem>\n              <Nav.Link as={Link} to=\"/Scrabble\">\n                Scrabble\n              </Nav.Link>\n            </NavItem>\n            <NavItem>\n              <Nav.Link as={Link} to=\"/WordSearch\">\n                WordSearchComponent\n              </Nav.Link>\n            </NavItem>\n          </Nav>\n        </Navbar>\n        <Switch>\n          <Route path=\"/WordSearch\">\n            <WordSearchComponent />\n          </Route>\n          <Route path={[\"/Scrabble\", \"/\"]}>\n            <ScrabbleComponent />\n          </Route>\n        </Switch>\n        {/* <DashboardComponent></DashboardComponent> */}\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}