{"version":3,"sources":["component/Scabble.tsx","component/WordSearch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScrabbleComponent","props","word","hint","display","selection","disabled","successJumbotron","failureJumbotron","hintJumbotron","failed","success","hintFlag","selectionIndex","newGame","array","sort","Math","random","this","Jumbotron","className","setState","console","log","pop","join","aria-hidden","Button","variant","onClick","bind","letter","clickIndex","event","push","shuffleArray","Container","Row","ButtonToolbar","aria-label","ButtonGroup","length","undo","showHint","split","map","leter","index","wordClick","hidden","check","Component","WordSearchComponent","App","Navbar","bg","Nav","NavItem","Link","as","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d862cac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Container,\r\n  Jumbotron,\r\n  Row,\r\n} from \"react-bootstrap\";\r\n\r\nexport class ScrabbleComponent extends Component<{}, {}> {\r\n  word: any;\r\n  hint = \"\";\r\n  display: any;\r\n  selection: any;\r\n  disabled: any;\r\n  successJumbotron: any;\r\n  failureJumbotron: any;\r\n  hintJumbotron: any = \"\";\r\n  failed = false;\r\n  success = false;\r\n  hintFlag = false;\r\n  selectionIndex: any;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.newGame();\r\n  }\r\n  shuffleArray(array: any) {\r\n    array.sort(() => Math.random() - 0.5);\r\n    return array;\r\n  }\r\n  showHint() {\r\n    this.hintFlag = true;\r\n    this.hintJumbotron = (\r\n      <Jumbotron className=\"text-center\">\r\n        <h1>Hint</h1>\r\n        <p>{this.hint}</p>\r\n      </Jumbotron>\r\n    );\r\n    this.setState({});\r\n  }\r\n  undo() {\r\n    console.log(this);\r\n    this.selection.pop();\r\n    this.disabled[this.selectionIndex.pop()] = false;\r\n    this.setState({});\r\n  }\r\n  check() {\r\n    if (this.selection.join(\"\") === this.word) {\r\n      this.failed = false;\r\n      this.success = true;\r\n      this.successJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>You Win</h1>\r\n          <p>\r\n            <i className=\"fa fa-smile-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    } else {\r\n      this.failed = true;\r\n      this.success = false;\r\n      this.failureJumbotron = (\r\n        <Jumbotron className=\"text-center\">\r\n          <h1>Try again!</h1>\r\n          <p>\r\n            <i className=\"fa fa-frown-o fa-3x\" aria-hidden=\"true\"></i>\r\n          </p>\r\n          <p>\r\n            Correct word &nbsp;\r\n            {this.word}\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={this.newGame.bind(this)}>\r\n              Next\r\n            </Button>\r\n          </p>\r\n        </Jumbotron>\r\n      );\r\n    }\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n\r\n  wordClick(letter: any, clickIndex: any, event: any) {\r\n    console.log(event);\r\n    console.log(letter);\r\n    this.selection.push(letter);\r\n    this.selectionIndex.push(clickIndex);\r\n    this.disabled[clickIndex] = true;\r\n    this.setState({});\r\n  }\r\n  newGame() {\r\n    this.word = \"admin\";\r\n    this.hint = \"स्वीकार करना\";\r\n    this.display = [...this.word];\r\n    this.display = this.shuffleArray(this.display);\r\n    this.selection = [];\r\n    this.selectionIndex = [];\r\n    this.disabled = [];\r\n    this.failed = false;\r\n    this.success = false;\r\n    this.hintFlag = false;\r\n    this.setState({});\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <br></br>{\" \"}\r\n        <Container className=\"justify-content-center\">\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.newGame.bind(this)}\r\n                >\r\n                  New Game\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  disabled={\r\n                    this.selectionIndex.length === 0 ||\r\n                    this.failed ||\r\n                    this.success\r\n                  }\r\n                  onClick={this.undo.bind(this)}\r\n                >\r\n                  Undo\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button\r\n                  disabled={this.hintFlag || this.failed || this.success}\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.showHint.bind(this)}\r\n                >\r\n                  Hint\r\n                </Button>{\" \"}\r\n              </ButtonGroup>\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <br></br>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.word.split(\"\").map((leter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"fill\" + index}\r\n                  >\r\n                    <Button variant=\"outline-primary\">\r\n                      {this.selection[index]}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>\r\n          <br></br>{\" \"}\r\n          <Row className=\"justify-content-center\">\r\n            <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n              {this.display.map((letter: string, index: any) => {\r\n                return (\r\n                  <ButtonGroup\r\n                    className=\"mr-2\"\r\n                    aria-label=\"First group\"\r\n                    key={\"word\" + index}\r\n                  >\r\n                    <Button\r\n                      // hidden={this.disabled[index] === true}\r\n                      onClick={this.wordClick.bind(this, letter, index)}\r\n                      disabled={this.disabled[index] === true}\r\n                    >\r\n                      {letter}\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                );\r\n              })}\r\n            </ButtonToolbar>\r\n          </Row>{\" \"}\r\n          <br></br>\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={this.selection.length !== this.word.length}\r\n          >\r\n            <Button\r\n              disabled={this.success || this.failed}\r\n              onClick={this.check.bind(this)}\r\n            >\r\n              Check\r\n            </Button>\r\n          </Row>{\" \"}\r\n          <br></br>\r\n          <Row className=\"justify-content-center\" hidden={!this.hintFlag}>\r\n            {this.hintJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(this.success && !this.failed)}\r\n          >\r\n            {this.successJumbotron}\r\n          </Row>{\" \"}\r\n          <Row\r\n            className=\"justify-content-center\"\r\n            hidden={!(!this.success && this.failed)}\r\n          >\r\n            {this.failureJumbotron}\r\n          </Row>{\" \"}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nexport class WordSearchComponent extends Component<{}, {}> {\r\n  render() {\r\n    return <div>WordSearchComponent</div>;\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { ScrabbleComponent } from \"./component/Scabble\";\nimport { WordSearchComponent } from \"./component/WordSearch\";\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"light\" variant=\"light\">\n          <Nav className=\"mr-auto\">\n            <NavItem>\n              <Nav.Link as={Link} to=\"/Scrabble\">\n                Scrabble\n              </Nav.Link>\n            </NavItem>\n            <NavItem>\n              <Nav.Link as={Link} to=\"/WordSearch\">\n                WordSearchComponent\n              </Nav.Link>\n            </NavItem>\n          </Nav>\n          {/* <Nav.Link type=\"div\">\n            <Link type=\"div\" to=\"/Scrabble\">\n              ScrabbleComponent\n            </Link>\n          </Nav.Link>\n          <Nav.Link type=\"div\">\n            <Link type=\"div\" to=\"/WordSearch\">\n              WordSearchComponent\n            </Link>\n          </Nav.Link>\n       */}\n        </Navbar>\n        <Switch>\n          <Route path={[\"/Scrabble\", \"/\"]}>\n            <ScrabbleComponent />\n          </Route>\n          <Route path=\"/WordSearch\">\n            <WordSearchComponent />\n          </Route>\n        </Switch>\n        {/* <DashboardComponent></DashboardComponent> */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}